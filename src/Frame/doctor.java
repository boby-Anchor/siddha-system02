  /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frame;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author CHETHANA
 */
public class doctor extends javax.swing.JFrame {

    UniversalMethod u = new UniversalMethod();
    public static int idsearch;

    public doctor() {
        initComponents();
        systemLogger.initLogger(doctor.class).info("Open Doctor Frme");
        image();
        UniversalMethod.TimeMethod(doctor_la_date, doctor_la_time);
        u.imageMethod(background, home_la_uesr_image, doctor_la_login_use_name, doctor_la_home_img, login_la_mini, login_la_cloce, doctor_la_search, doctor_la_update, doctor_la_delete, doctor_la_enter);
        jScrollPane_agent_name_id.setVisible(false);
        jScrollPane_doctor_id.setVisible(false);
        doctor_la_new.setVisible(false);
         u.imageMethod("/img/newB2.png", doctor_la_new);    
        doctor_la_login_use_name.setText(u.getLogUser());
        cleareFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        doctor_la_date = new javax.swing.JLabel();
        doctor_la_home_img = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        doctor_la_time = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        home_la_uesr_image = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        doctor_la_login_use_name = new javax.swing.JLabel();
        doctor_la_enter = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        login_la_mini = new javax.swing.JLabel();
        login_la_cloce = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        doctor_la_update = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane_agent_name_id = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane_doctor_id = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel20 = new javax.swing.JLabel();
        doctor_la_search = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        doctor_la_new = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_doctor = new javax.swing.JTable();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        doctor_la_delete = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        tx_doctor_id = new javax.swing.JTextField();
        tx_nic = new javax.swing.JTextField();
        tx_contact_number = new javax.swing.JTextField();
        tx_account_number = new javax.swing.JTextField();
        tx_agent = new javax.swing.JTextField();
        tx_address = new javax.swing.JTextField();
        tx_branch = new javax.swing.JTextField();
        tx_name = new javax.swing.JTextField();
        jComboBox_bank = new javax.swing.JComboBox();
        jComboBox_distric = new javax.swing.JComboBox();
        jComboBox_isactive = new javax.swing.JComboBox();
        background = new javax.swing.JLabel();

        jTextField1.setBackground(new java.awt.Color(235, 228, 228));
        jTextField1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(0, 0, 0));
        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1366, 768));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1366, 768));
        getContentPane().setLayout(null);

        doctor_la_date.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        doctor_la_date.setForeground(new java.awt.Color(255, 255, 255));
        doctor_la_date.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        doctor_la_date.setText("Invoice");
        doctor_la_date.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(doctor_la_date);
        doctor_la_date.setBounds(10, 5, 130, 35);

        doctor_la_home_img.setText("jLabel1");
        doctor_la_home_img.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctor_la_home_imgMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                doctor_la_home_imgMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                doctor_la_home_imgMouseExited(evt);
            }
        });
        getContentPane().add(doctor_la_home_img);
        doctor_la_home_img.setBounds(600, 5, 80, 30);

        jSeparator3.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator3.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(140, 5, 20, 30);

        doctor_la_time.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        doctor_la_time.setForeground(new java.awt.Color(255, 255, 255));
        doctor_la_time.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        doctor_la_time.setText("Invoice");
        doctor_la_time.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(doctor_la_time);
        doctor_la_time.setBounds(150, 5, 130, 35);

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(0, 43, 1370, 2);

        home_la_uesr_image.setText("userlogo");
        getContentPane().add(home_la_uesr_image);
        home_la_uesr_image.setBounds(290, 10, 30, 30);

        jSeparator4.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator4.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator4);
        jSeparator4.setBounds(280, 5, 20, 30);

        doctor_la_login_use_name.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        doctor_la_login_use_name.setForeground(new java.awt.Color(255, 255, 255));
        doctor_la_login_use_name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        doctor_la_login_use_name.setText("Invoice");
        getContentPane().add(doctor_la_login_use_name);
        doctor_la_login_use_name.setBounds(330, 5, 260, 35);

        doctor_la_enter.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        doctor_la_enter.setForeground(new java.awt.Color(0, 0, 0));
        doctor_la_enter.setText("Enter");
        doctor_la_enter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctor_la_enterMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                doctor_la_enterMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                doctor_la_enterMouseExited(evt);
            }
        });
        getContentPane().add(doctor_la_enter);
        doctor_la_enter.setBounds(580, 400, 120, 40);

        jSeparator2.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator2);
        jSeparator2.setBounds(580, 5, 20, 30);

        login_la_mini.setBackground(new java.awt.Color(255, 255, 255));
        login_la_mini.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        login_la_mini.setForeground(new java.awt.Color(0, 0, 0));
        login_la_mini.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        login_la_mini.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                login_la_miniMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                login_la_miniMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                login_la_miniMouseExited(evt);
            }
        });
        getContentPane().add(login_la_mini);
        login_la_mini.setBounds(1295, 10, 30, 30);

        login_la_cloce.setBackground(new java.awt.Color(255, 255, 255));
        login_la_cloce.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        login_la_cloce.setForeground(new java.awt.Color(0, 0, 0));
        login_la_cloce.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        login_la_cloce.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                login_la_cloceMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                login_la_cloceMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                login_la_cloceMouseExited(evt);
            }
        });
        getContentPane().add(login_la_cloce);
        login_la_cloce.setBounds(1330, 10, 30, 30);

        jLabel1.setBackground(new java.awt.Color(51, 204, 255));
        jLabel1.setFont(new java.awt.Font("Eras Bold ITC", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DOCTOR");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(760, 1, 290, 40);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText(":");
        jLabel2.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel2);
        jLabel2.setBounds(820, 90, 30, 30);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Doctor ID");
        jLabel3.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel3);
        jLabel3.setBounds(690, 90, 130, 30);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Doctor's Name");
        jLabel4.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel4);
        jLabel4.setBounds(50, 130, 160, 30);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText(":");
        jLabel5.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel5);
        jLabel5.setBounds(210, 130, 30, 30);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Contact Number");
        jLabel6.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel6);
        jLabel6.setBounds(50, 170, 160, 30);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText(":");
        jLabel7.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel7);
        jLabel7.setBounds(210, 170, 30, 30);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("NIC Number");
        jLabel8.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel8);
        jLabel8.setBounds(50, 210, 160, 30);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText(":");
        jLabel9.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel9);
        jLabel9.setBounds(210, 210, 30, 30);

        jLabel10.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("District");
        jLabel10.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel10);
        jLabel10.setBounds(690, 210, 130, 30);

        jLabel11.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText(":");
        jLabel11.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel11);
        jLabel11.setBounds(820, 210, 30, 30);

        jLabel12.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Bank Name");
        jLabel12.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel12);
        jLabel12.setBounds(50, 300, 160, 30);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText(":");
        jLabel13.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel13);
        jLabel13.setBounds(210, 300, 30, 30);

        jLabel14.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Address");
        jLabel14.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel14);
        jLabel14.setBounds(50, 250, 160, 30);

        jLabel15.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText(":");
        jLabel15.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel15);
        jLabel15.setBounds(210, 250, 30, 30);

        doctor_la_update.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        doctor_la_update.setForeground(new java.awt.Color(0, 0, 0));
        doctor_la_update.setText("Update");
        doctor_la_update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctor_la_updateMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                doctor_la_updateMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                doctor_la_updateMouseExited(evt);
            }
        });
        getContentPane().add(doctor_la_update);
        doctor_la_update.setBounds(230, 400, 120, 40);

        jLabel17.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText(":");
        jLabel17.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel17);
        jLabel17.setBounds(820, 340, 30, 30);

        jLabel18.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Account Number");
        jLabel18.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel18);
        jLabel18.setBounds(50, 340, 160, 30);

        jLabel19.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText(":");
        jLabel19.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel19);
        jLabel19.setBounds(210, 340, 30, 30);

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jList1KeyPressed(evt);
            }
        });
        jScrollPane_agent_name_id.setViewportView(jList1);

        getContentPane().add(jScrollPane_agent_name_id);
        jScrollPane_agent_name_id.setBounds(230, 120, 340, 110);

        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList2MouseClicked(evt);
            }
        });
        jList2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jList2KeyPressed(evt);
            }
        });
        jScrollPane_doctor_id.setViewportView(jList2);

        getContentPane().add(jScrollPane_doctor_id);
        jScrollPane_doctor_id.setBounds(840, 120, 450, 110);

        jSeparator5.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator5.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jSeparator5);
        jSeparator5.setBounds(0, 380, 1370, 10);

        jSeparator6.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator6.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jSeparator6);
        jSeparator6.setBounds(10, 290, 1370, 10);

        jLabel20.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Branch Name");
        jLabel20.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel20);
        jLabel20.setBounds(690, 300, 130, 30);

        doctor_la_search.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        doctor_la_search.setForeground(new java.awt.Color(0, 0, 0));
        doctor_la_search.setText("Search");
        doctor_la_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctor_la_searchMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                doctor_la_searchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                doctor_la_searchMouseExited(evt);
            }
        });
        getContentPane().add(doctor_la_search);
        doctor_la_search.setBounds(50, 400, 120, 40);

        jLabel22.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Is Active");
        jLabel22.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel22);
        jLabel22.setBounds(690, 340, 130, 30);

        doctor_la_new.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        doctor_la_new.setForeground(new java.awt.Color(0, 0, 0));
        doctor_la_new.setText("New");
        doctor_la_new.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctor_la_newMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                doctor_la_newMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                doctor_la_newMouseExited(evt);
            }
        });
        getContentPane().add(doctor_la_new);
        doctor_la_new.setBounds(580, 400, 120, 40);

        jTable_doctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Agent  ID-Name", "Doctor ID", "Full Name", "Contact Number", "Nic Number", "District", "Address", "Bank Name", "Branch Name", "Account Number", "Is Active"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_doctor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_doctorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_doctor);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 460, 1350, 300);

        jLabel24.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Agent Name-ID");
        jLabel24.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel24);
        jLabel24.setBounds(50, 90, 160, 30);

        jLabel25.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText(":");
        jLabel25.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel25);
        jLabel25.setBounds(210, 90, 30, 30);

        doctor_la_delete.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        doctor_la_delete.setForeground(new java.awt.Color(0, 0, 0));
        doctor_la_delete.setText("Delete");
        doctor_la_delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctor_la_deleteMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                doctor_la_deleteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                doctor_la_deleteMouseExited(evt);
            }
        });
        getContentPane().add(doctor_la_delete);
        doctor_la_delete.setBounds(400, 400, 120, 40);

        jLabel27.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText(":");
        jLabel27.setBorder(new javax.swing.border.MatteBorder(null));
        getContentPane().add(jLabel27);
        jLabel27.setBounds(820, 300, 30, 30);

        tx_doctor_id.setBackground(new java.awt.Color(255, 255, 255));
        tx_doctor_id.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tx_doctor_id.setForeground(new java.awt.Color(0, 0, 0));
        tx_doctor_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tx_doctor_idKeyPressed(evt);
            }
        });
        getContentPane().add(tx_doctor_id);
        tx_doctor_id.setBounds(840, 90, 450, 33);

        tx_nic.setBackground(new java.awt.Color(255, 255, 255));
        tx_nic.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tx_nic.setForeground(new java.awt.Color(0, 0, 0));
        tx_nic.setText(" ");
        tx_nic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tx_nicKeyPressed(evt);
            }
        });
        getContentPane().add(tx_nic);
        tx_nic.setBounds(230, 210, 340, 33);

        tx_contact_number.setBackground(new java.awt.Color(255, 255, 255));
        tx_contact_number.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tx_contact_number.setForeground(new java.awt.Color(0, 0, 0));
        tx_contact_number.setText(" ");
        tx_contact_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_contact_numberActionPerformed(evt);
            }
        });
        tx_contact_number.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tx_contact_numberKeyPressed(evt);
            }
        });
        getContentPane().add(tx_contact_number);
        tx_contact_number.setBounds(230, 170, 340, 33);

        tx_account_number.setBackground(new java.awt.Color(255, 255, 255));
        tx_account_number.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tx_account_number.setForeground(new java.awt.Color(0, 0, 0));
        tx_account_number.setText(" ");
        tx_account_number.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tx_account_numberKeyPressed(evt);
            }
        });
        getContentPane().add(tx_account_number);
        tx_account_number.setBounds(230, 340, 340, 33);

        tx_agent.setBackground(new java.awt.Color(255, 255, 255));
        tx_agent.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tx_agent.setForeground(new java.awt.Color(0, 0, 0));
        tx_agent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tx_agentKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tx_agentKeyReleased(evt);
            }
        });
        getContentPane().add(tx_agent);
        tx_agent.setBounds(230, 90, 340, 33);

        tx_address.setBackground(new java.awt.Color(255, 255, 255));
        tx_address.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tx_address.setForeground(new java.awt.Color(0, 0, 0));
        tx_address.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_addressActionPerformed(evt);
            }
        });
        tx_address.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tx_addressKeyPressed(evt);
            }
        });
        getContentPane().add(tx_address);
        tx_address.setBounds(230, 250, 1060, 33);

        tx_branch.setBackground(new java.awt.Color(255, 255, 255));
        tx_branch.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tx_branch.setForeground(new java.awt.Color(0, 0, 0));
        tx_branch.setText(" ");
        tx_branch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tx_branchKeyPressed(evt);
            }
        });
        getContentPane().add(tx_branch);
        tx_branch.setBounds(840, 300, 450, 33);

        tx_name.setBackground(new java.awt.Color(255, 255, 255));
        tx_name.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tx_name.setForeground(new java.awt.Color(0, 0, 0));
        tx_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tx_nameKeyPressed(evt);
            }
        });
        getContentPane().add(tx_name);
        tx_name.setBounds(230, 130, 1060, 33);

        jComboBox_bank.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox_bank.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jComboBox_bank.setForeground(new java.awt.Color(0, 0, 0));
        jComboBox_bank.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BOC", "HDFC", "PEOPLES", "HNB", "COMMERCLAL", "SAMPATH", "DFCC", "NDB", "NATION TRUST", "SEYLAN", "RDB", "SDB", "PAN ASIA", "UNION ", "SMIB" }));
        jComboBox_bank.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_bankKeyPressed(evt);
            }
        });
        getContentPane().add(jComboBox_bank);
        jComboBox_bank.setBounds(230, 300, 340, 33);

        jComboBox_distric.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox_distric.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jComboBox_distric.setForeground(new java.awt.Color(0, 0, 0));
        jComboBox_distric.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gampaha", "Colombo", "Kaluthara", "Kegalle", "Rathnapura", "Galle", "Mathara", "Hambanthota", "Puthhthalama", "Kurunegala", "Anuradhapura", "Polonnaruwa", "Jaffna", "Kilinochchi", "Mulathivu", "Vavuniya", "Mannaram", "Trincomalee", "Batticaloa", "Ampara", "Badulla", "Monaragala", "Matale", "Nuwara Eliya", "Kandy" }));
        jComboBox_distric.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_districKeyPressed(evt);
            }
        });
        getContentPane().add(jComboBox_distric);
        jComboBox_distric.setBounds(840, 210, 450, 33);

        jComboBox_isactive.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox_isactive.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBox_isactive.setForeground(new java.awt.Color(0, 0, 0));
        jComboBox_isactive.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Active", "Inactive", "Delete" }));
        jComboBox_isactive.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_isactiveKeyPressed(evt);
            }
        });
        getContentPane().add(jComboBox_isactive);
        jComboBox_isactive.setBounds(840, 340, 450, 33);

        background.setBackground(new java.awt.Color(234, 232, 232));
        background.setForeground(new java.awt.Color(255, 255, 255));
        background.setText("jLabel1");
        getContentPane().add(background);
        background.setBounds(0, 0, 1380, 770);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void login_la_miniMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_miniMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_login_la_miniMouseClicked

    private void login_la_miniMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_miniMouseEntered
        //    login_la_mini.setBackground(Color.gray);
        u.imageMethod("/img/mini2.png", login_la_mini);
    }//GEN-LAST:event_login_la_miniMouseEntered

    private void login_la_miniMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_miniMouseExited
        //    login_la_mini.setBackground(Color.white);
        u.imageMethod("/img/mini.png", login_la_mini);
    }//GEN-LAST:event_login_la_miniMouseExited

    private void login_la_cloceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_cloceMouseClicked
        SystemClose();
    }//GEN-LAST:event_login_la_cloceMouseClicked

    private void login_la_cloceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_cloceMouseEntered
        //    login_la_cloce.setBackground(Color.red);
        u.imageMethod("/img/exti.png", login_la_cloce);
    }//GEN-LAST:event_login_la_cloceMouseEntered

    private void login_la_cloceMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_la_cloceMouseExited
        //    login_la_cloce.setBackground(Color.white);
        u.imageMethod("/img/exti2.png", login_la_cloce);
    }//GEN-LAST:event_login_la_cloceMouseExited

    private void doctor_la_home_imgMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_home_imgMouseEntered
        u.imageMethod("/img/homeB2.png", doctor_la_home_img);
    }//GEN-LAST:event_doctor_la_home_imgMouseEntered

    private void doctor_la_home_imgMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_home_imgMouseExited
        u.imageMethod("/img/homeB1.png", doctor_la_home_img);
    }//GEN-LAST:event_doctor_la_home_imgMouseExited

    private void doctor_la_home_imgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_home_imgMouseClicked
         u.imageMethod("/img/homeB1.png", doctor_la_home_img); 
        if(UniversalMethod.getuserType().equals("Admin") | UniversalMethod.getuserType().equals("Maneger") ){
            int x = JOptionPane.showConfirmDialog(this, "Do you sure Go to The Home ?", "Change Interface", JOptionPane.YES_NO_OPTION);
            if (JOptionPane.YES_OPTION == x) {
                    home.getCallPopup().setVisible(true);
                    this.dispose();
             } else if (JOptionPane.NO_OPTION == x) {
                 setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
                 tx_agent.grabFocus();
             }
        }else if(UniversalMethod.getuserType().equals("Caller") | UniversalMethod.getuserType().equals("Stock Keeper") | UniversalMethod.getuserType().equals("User")){
             int x = JOptionPane.showConfirmDialog(this, "Do you sure Go to The Home ?", "Change Interface", JOptionPane.YES_NO_OPTION);
            if (JOptionPane.YES_OPTION == x) {
                    home_user.getCallPopup().setVisible(true);
                    this.dispose();
             } else if (JOptionPane.NO_OPTION == x) {
                 setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
                 tx_agent.grabFocus();
             }
        }
    }//GEN-LAST:event_doctor_la_home_imgMouseClicked

    private void doctor_la_searchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_searchMouseEntered
        u.imageMethod("/img/search2.png", doctor_la_search);
    }//GEN-LAST:event_doctor_la_searchMouseEntered

    private void doctor_la_searchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_searchMouseExited
        u.imageMethod("/img/search.png", doctor_la_search);
    }//GEN-LAST:event_doctor_la_searchMouseExited

    private void doctor_la_updateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_updateMouseEntered
        u.imageMethod("/img/update2.png", doctor_la_update);
    }//GEN-LAST:event_doctor_la_updateMouseEntered

    private void doctor_la_updateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_updateMouseExited
        u.imageMethod("/img/update.png", doctor_la_update);
    }//GEN-LAST:event_doctor_la_updateMouseExited

    private void doctor_la_deleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_deleteMouseEntered
        u.imageMethod("/img/delete2.png", doctor_la_delete);
    }//GEN-LAST:event_doctor_la_deleteMouseEntered

    private void doctor_la_deleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_deleteMouseExited
        u.imageMethod("/img/delete.png", doctor_la_delete);
    }//GEN-LAST:event_doctor_la_deleteMouseExited

    private void doctor_la_enterMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_enterMouseEntered
        u.imageMethod("/img/enter2.png", doctor_la_enter);
    }//GEN-LAST:event_doctor_la_enterMouseEntered

    private void doctor_la_enterMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_enterMouseExited
        u.imageMethod("/img/enter.png", doctor_la_enter);
    }//GEN-LAST:event_doctor_la_enterMouseExited

    private void doctor_la_newMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_newMouseEntered
        u.imageMethod("/img/newB2.png", doctor_la_new);
    }//GEN-LAST:event_doctor_la_newMouseEntered

    private void doctor_la_newMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_newMouseExited
        u.imageMethod("/img/newB.png", doctor_la_new);
    }//GEN-LAST:event_doctor_la_newMouseExited

    private void tx_doctor_idKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tx_doctor_idKeyPressed
        
        txValidateKeyEvent(evt, tx_doctor_id, "N", 20);
        if (!tx_doctor_id.getText().trim().equals("") & tx_agent.getText().trim().equals("")) {
            jScrollPane_doctor_id.setVisible(true);
            searchANDListDockter();
        }
        
        if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_UP) {
            jList2.grabFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (tx_doctor_id.getText().trim().isEmpty()) {
                tx_doctor_id.grabFocus();
            } else {
                jScrollPane_doctor_id.setVisible(false);
                tx_name.grabFocus();
            }
        }
    }//GEN-LAST:event_tx_doctor_idKeyPressed

    private void tx_agentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tx_agentKeyPressed
      //  jScrollPane_agent_name_id.setVisible(true);
        txValidateKeyEvent(evt, tx_agent, "NA", 20);
        
       if ((tx_agent.getText().trim().isEmpty())) {
           jScrollPane_agent_name_id.setVisible(false);
       }else if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_UP) {
            jList1.grabFocus();
        }else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!tx_agent.getText().trim().isEmpty()) {
                jScrollPane_agent_name_id.setVisible(false);
                tx_doctor_id.grabFocus();
            } else {
                tx_agent.grabFocus();
            }
        }else{
           searchANDListDockterrep();
           jScrollPane_agent_name_id.setVisible(true);
       }
    }//GEN-LAST:event_tx_agentKeyPressed

    private void jTable_doctorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_doctorMouseClicked
        DefaultTableModel defTabMod = (DefaultTableModel) jTable_doctor.getModel();
        doctor_la_new.setVisible(true);
        doctor_la_enter.setVisible(false);
        tx_agent.setText(defTabMod.getValueAt(jTable_doctor.getSelectedRow(), 0).toString());
        idsearch = Integer.parseInt(defTabMod.getValueAt(jTable_doctor.getSelectedRow(), 1).toString());
        tx_doctor_id.setText(defTabMod.getValueAt(jTable_doctor.getSelectedRow(), 1).toString());
        tx_name.setText(defTabMod.getValueAt(jTable_doctor.getSelectedRow(), 2).toString());
        tx_contact_number.setText(defTabMod.getValueAt(jTable_doctor.getSelectedRow(), 3).toString());
        tx_nic.setText(defTabMod.getValueAt(jTable_doctor.getSelectedRow(), 4).toString());
        jComboBox_distric.setSelectedItem(defTabMod.getValueAt(jTable_doctor.getSelectedRow(), 5).toString());
        tx_address.setText(defTabMod.getValueAt(jTable_doctor.getSelectedRow(), 6).toString());
        jComboBox_bank.setSelectedItem(defTabMod.getValueAt(jTable_doctor.getSelectedRow(), 7).toString());
        tx_branch.setText(defTabMod.getValueAt(jTable_doctor.getSelectedRow(), 8).toString());
        tx_account_number.setText(defTabMod.getValueAt(jTable_doctor.getSelectedRow(), 9).toString());
        jComboBox_isactive.setSelectedItem(defTabMod.getValueAt(jTable_doctor.getSelectedRow(), 10).toString());
    }//GEN-LAST:event_jTable_doctorMouseClicked

    private void tx_contact_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_contact_numberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_contact_numberActionPerformed

    private void tx_addressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_addressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_addressActionPerformed

    private void doctor_la_enterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_enterMouseClicked
          u.imageMethod("/img/enter2.png", doctor_la_enter );
        emterMouseClickMethod();
    }//GEN-LAST:event_doctor_la_enterMouseClicked

    private void doctor_la_deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_deleteMouseClicked
        u.imageMethod("/img/delete2.png", doctor_la_delete );
        if (idsearch == 0) {
            JOptionPane.showMessageDialog(this, "Please Select the Doctor", "Not Selected", JOptionPane.OK_OPTION);
        } else {
            deleterep();
        }
    }//GEN-LAST:event_doctor_la_deleteMouseClicked

    private void doctor_la_updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_updateMouseClicked
        u.imageMethod("/img/update2.png", doctor_la_update );
        if (idsearch == 0) {
            JOptionPane.showMessageDialog(this, "Please Select the Doctor", "Not Selected", JOptionPane.OK_OPTION);
        } else {
            updaterep();
        }
    }//GEN-LAST:event_doctor_la_updateMouseClicked

    private void doctor_la_newMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_newMouseClicked
       u.imageMethod("/img/newB2.png", doctor_la_new);
        doctor_la_enter.setVisible(true);
        doctor_la_new.setVisible(false);
        cleareFields();
    }//GEN-LAST:event_doctor_la_newMouseClicked

    private void doctor_la_searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctor_la_searchMouseClicked
         u.imageMethod("/img/search2.png", doctor_la_search );
        if (!tx_doctor_id.getText().trim().isEmpty()) {
            searchAgent();
        } else {
            tx_doctor_id.grabFocus();
        }
    }//GEN-LAST:event_doctor_la_searchMouseClicked

    private void tx_nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tx_nameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            u.grabFocusMethod(evt, tx_name, tx_contact_number);
        } else {
            txValidateKeyEvent(evt, tx_name, "A", 100);
        }
    }//GEN-LAST:event_tx_nameKeyPressed

    private void tx_contact_numberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tx_contact_numberKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            u.grabFocusMethod(evt, tx_contact_number, tx_nic);
        } else {
            txValidateKeyEvent(evt, tx_contact_number, "N", 10);
        }
    }//GEN-LAST:event_tx_contact_numberKeyPressed

    private void tx_nicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tx_nicKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            u.grabFocusMethod(evt, tx_nic, jComboBox_distric);
        } else {
            txValidateKeyEvent(evt, tx_nic, "NIC", 12);
        }
    }//GEN-LAST:event_tx_nicKeyPressed

    private void tx_addressKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tx_addressKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            u.grabFocusMethod(evt, tx_address, jComboBox_bank);
        } else {
            txValidateKeyEvent(evt, tx_address, "NA", 170);
        }
    }//GEN-LAST:event_tx_addressKeyPressed

    private void tx_account_numberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tx_account_numberKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            u.grabFocusMethod(evt, tx_account_number, jComboBox_isactive);
        } else {
            txValidateKeyEvent(evt, tx_account_number, "N", 10);
        }
    }//GEN-LAST:event_tx_account_numberKeyPressed

    private void tx_branchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tx_branchKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            u.grabFocusMethod(evt, tx_branch, tx_account_number);
        } else {
            txValidateKeyEvent(evt, tx_branch, "A", 20);
        }
    }//GEN-LAST:event_tx_branchKeyPressed

    private void jComboBox_districKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_districKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            u.grabFocusMethod(evt, jComboBox_distric, tx_address);
        }
    }//GEN-LAST:event_jComboBox_districKeyPressed

    private void jComboBox_bankKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_bankKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            u.grabFocusMethod(evt, jComboBox_bank, tx_branch);
        }
    }//GEN-LAST:event_jComboBox_bankKeyPressed

    private void jComboBox_isactiveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_isactiveKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            u.grabFocusMethod(evt, jComboBox_isactive, doctor_la_enter);
        }
    }//GEN-LAST:event_jComboBox_isactiveKeyPressed

    private void tx_agentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tx_agentKeyReleased
     
    }//GEN-LAST:event_tx_agentKeyReleased

    private void jList1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            tx_agent.setText(jList1.getSelectedValue().toString());
                jScrollPane_agent_name_id.setVisible(false);
                tx_doctor_id.grabFocus();
        }
    }//GEN-LAST:event_jList1KeyPressed

    private void jList2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseClicked
       tx_doctor_id.setText(jList2.getSelectedValue().toString());
                jScrollPane_doctor_id.setVisible(false);
                tx_name.grabFocus();
    }//GEN-LAST:event_jList2MouseClicked

    private void jList2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList2KeyPressed
       if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            tx_doctor_id.setText(jList2.getSelectedValue().toString());
                jScrollPane_doctor_id.setVisible(false);
                tx_name.grabFocus();
        }
    }//GEN-LAST:event_jList2KeyPressed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
      tx_agent.setText(jList1.getSelectedValue().toString());
                jScrollPane_agent_name_id.setVisible(false);
                tx_doctor_id.grabFocus();
    }//GEN-LAST:event_jList1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(doctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(doctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(doctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(doctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new doctor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JLabel doctor_la_date;
    private javax.swing.JLabel doctor_la_delete;
    private javax.swing.JLabel doctor_la_enter;
    private javax.swing.JLabel doctor_la_home_img;
    private javax.swing.JLabel doctor_la_login_use_name;
    private javax.swing.JLabel doctor_la_new;
    private javax.swing.JLabel doctor_la_search;
    private javax.swing.JLabel doctor_la_time;
    private javax.swing.JLabel doctor_la_update;
    private javax.swing.JLabel home_la_uesr_image;
    private javax.swing.JComboBox jComboBox_bank;
    private javax.swing.JComboBox jComboBox_distric;
    private javax.swing.JComboBox jComboBox_isactive;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane_agent_name_id;
    private javax.swing.JScrollPane jScrollPane_doctor_id;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTable jTable_doctor;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel login_la_cloce;
    private javax.swing.JLabel login_la_mini;
    private javax.swing.JTextField tx_account_number;
    private javax.swing.JTextField tx_address;
    private javax.swing.JTextField tx_agent;
    private javax.swing.JTextField tx_branch;
    private javax.swing.JTextField tx_contact_number;
    private javax.swing.JTextField tx_doctor_id;
    private javax.swing.JTextField tx_name;
    private javax.swing.JTextField tx_nic;
    // End of variables declaration//GEN-END:variables

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> Singltan class 
     * *** >>> Why ------------->>> ek object ekk hdnn
     * *** >>> Parameters ------>>>
     * *** >>> Status ---------->>>
     */
//>>>>>>>>> Get Instance <<<<<<<<<<<  
    private static final doctor doctor = new doctor();

    public static doctor getCallPopup() {
        return doctor;
    }
//>>>>>>>>> Get Instance <<<<<<<<<<<         

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\  
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> mon 6 September
     * *** >>> What ------------>>> SystemClose()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> no
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> System cloce <<<<<<<<<<<   
    void SystemClose() {
        int x = JOptionPane.showConfirmDialog(this, "Do you sure close the System ?", "Exit System", JOptionPane.YES_NO_OPTION);
        if (JOptionPane.YES_OPTION == x) {
            // setDefaultCloseOperation(EXIT_ON_CLOSE);
            u.insertUserClose(tx_agent, doctor_la_date.getText(), doctor_la_time.getText());
            System.exit(0);
        } else if (JOptionPane.NO_OPTION == x) {
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            login_la_cloce.setBackground(new Color(153, 204, 255));
        }
    }
    //>>>>>>>>> System cloce <<<<<<<<<<<       

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\  
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 

    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>>
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>>
     * *** >>> Status ---------->>>
     */
//>>>>>>>>> set image <<<<<<<<<<<
    void image() {

        u.imageMethod("/img/user2.png", home_la_uesr_image);
        u.imageMethod("/img/mini.png", login_la_mini);
        u.imageMethod("/img/exti2.png", login_la_cloce);
        u.imageMethod("/img/bg_all_2.jpg", background);
        u.imageMethod("/img/home_.png", doctor_la_home_img);

        u.imageMethod("/img/search.png", doctor_la_search);
        u.imageMethod("/img/update.png", doctor_la_update);
        u.imageMethod("/img/delete.png", doctor_la_delete);
        u.imageMethod("/img/enter.png", doctor_la_enter);
        u.imageMethod("/img/newB.png", doctor_la_new);
    }

 //>>>>>>>>> set image <<<<<<<<<<<
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\      
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> mon 6 September
     * *** >>> What ------------>>> txValidateKeyEvent()
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>> KeyEvent evt, JTextField txName, String txType, int lenthNeedFeld
     * *** >>> Status ---------->>>
     */
    //>>>>>>>>> txValidateKeyEvent cloce <<<<<<<<<<<      
    private void txValidateKeyEvent(KeyEvent evt, JTextField txName, String txType, int lenthNeedFeld) {

        int iNumber = evt.getKeyCode();
        if (txName.getText().length() <= lenthNeedFeld) {
            if (txType.equals("NIC")) {
                if (txName.getText().length() == 8) {
                    if ((iNumber == 86)) {
                        txName.setEditable(true);
                    }
                } else if ((iNumber >= 96 & iNumber <= 105) | (iNumber >= 48 & iNumber <= 57) | (iNumber == 8)) {
                    txName.setEditable(true);
                } else {
                    txName.setEditable(false);
                }

            }
            if (txType.equals("N")) {

                if ((iNumber >= 96 & iNumber <= 105) | (iNumber >= 48 & iNumber <= 57) | (iNumber == 8)) {
                    txName.setEditable(true);
                } else {
                    txName.setEditable(false);
                }

            }
            if (txType.equals("A")) {

                if ((iNumber >= 65 & iNumber <= 90) | (iNumber == 8) | (iNumber == 32) | (iNumber == 46)) {
                    txName.setEditable(true);
                } else {
                    txName.setEditable(false);
                }

            }
            if (txType.equals("NA")) {

                if ((iNumber >= 96 & iNumber <= 105) | (iNumber >= 48 & iNumber <= 57) | (iNumber >= 65 & iNumber <= 90) | (iNumber == 8) | (iNumber == 45) | (iNumber == 32) | (iNumber == 44) | (iNumber == 46) | (iNumber == 47)) {
                    txName.setEditable(true);
                } else {
                    txName.setEditable(false);
                }

            }

        } else if ((iNumber == 8)) {
            txName.setEditable(true);
        } else {
            txName.setEditable(false);
        }
    }
    //>>>>>>>>> txValidateKeyEvent cloce <<<<<<<<<<<       

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\   
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>>  
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>>
     * *** >>> Status ---------->>>
     */
//>>>>>>>>> selectAllDoctorRep <<<<<<<<<<<      
    private void selectAllDoctorRep() {
        try {
            DefaultTableModel defTabMod = (DefaultTableModel) jTable_doctor.getModel();
            defTabMod.getDataVector().removeAllElements();
            ResultSet rs = DBClass.getData("select * from doctorrep where status='1' order by iddoctorrep");
            
            if (DBClass.r.isBeforeFirst() == true) {
                while (rs.next()) {
                    Vector v = new Vector();
                    v.add(rs.getString("iddoctorrep"));
                    v.add(rs.getString("repname"));
                    defTabMod.addRow(v);
                }
            }
        } catch (Exception ex) {
                systemLogger.initLogger(doctor.class).error("selectAllDoctorRep()  Error",ex);
            JOptionPane.showMessageDialog(null, "Error selectAllDoctorRep !!! \n selectAllDoctorRep() \n", "Error Massage", JOptionPane.ERROR_MESSAGE);
            tx_agent.grabFocus();
        }

    }
//>>>>>>>>>selectAllDoctorRep <<<<<<<<<<<         

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\   
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>>  
     * *** >>> Why ------------->>> 
     * *** >>> Parameters ------>>>
     * *** >>> Status ---------->>>
     */
//>>>>>>>>> searchALLDoctor <<<<<<<<<<<      
    private void searchALLDoctor() {
        try {
             DefaultTableModel defTabMod = (DefaultTableModel) jTable_doctor.getModel();
            defTabMod.getDataVector().removeAllElements();
            ResultSet rs = DBClass.getData("select * from doctor order by iddoctor");
            if (DBClass.r.isBeforeFirst() == true) {
                while (rs.next()) {
                     Vector v = new Vector();
                     v.add(""+searchDockterrep(rs.getInt("iddoctorrep")));
                     v.add(rs.getString("iddoctor"));
                     v.add(rs.getString("doctorname"));
                     v.add(rs.getString("doctortell"));
                     v.add(rs.getString("doctorid"));
                     v.add(rs.getString("doctorprovince"));
                     v.add(rs.getString("doctoraddress"));
                     v.add(rs.getString("doctorbankname"));
                     v.add(rs.getString("doctorbankbranchname"));
                     v.add(rs.getString("doctorbankacountnumber"));
                   if(rs.getInt("status") == 1){
                       v.add("Active");
                       defTabMod.addRow(v);
                   }else{
                       v.add("Inactive");
                       defTabMod.addRow(v);
                   } 
                }
            }
        } catch (Exception ex) {
            systemLogger.initLogger(doctor.class).error("searchALLDoctor()  Error",ex);
JOptionPane.showMessageDialog(null, "Error searchDoctorTable!!! \n ","Error Massage", JOptionPane.ERROR_MESSAGE);
tx_agent.grabFocus();
        }
    }
    //>>>>>>>>> searchALLDoctor <<<<<<<<<<<         

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\    

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>> 
     * *** >>> Why ------------->>> 
     * *** >>> Parameters ------>>>
     * *** >>> Status ---------->>>
     */
//>>>>>>>>> addJTable <<<<<<<<<<<      
    private void addJTable() {
        try {

            int bb = jComboBox_isactive.getSelectedIndex();
            if (bb == 0) {
                bb = 1;
            } else if (bb == 1) {
                bb = 0;
            } else {
                bb = 2;
            }
            int repid = Integer.parseInt(tx_agent.getText().split("/")[0]);
            DBClass.putData("insert into doctor(iddoctor,iddoctorrep,doctorid,doctorname,doctoraddress,doctortell,doctorprovince,doctorbankname,doctorbankbranchname,doctorbankacountnumber,status) values("
                    + "'"+Integer.parseInt(tx_doctor_id.getText())+"' ,'" + repid + "', '" + tx_nic.getText() + "','" + tx_name.getText() + "' ,'" + tx_address.getText() + "' ,'" + tx_contact_number.getText() + "' ,'" + jComboBox_distric.getSelectedItem().toString()
                    + "','" + jComboBox_bank.getSelectedItem().toString() + "' ,'" + tx_branch.getText()
                    + "','" + tx_account_number.getText() + "','" + bb + "' )");
            cleareFields();
            
        } catch (Exception ex) {
                     systemLogger.initLogger(doctor.class).error("addJTable()  Error",ex);
           JOptionPane.showMessageDialog(null, "Error DoctoraTableInsert !!! \n addToTable() \n" , "Error Massage", JOptionPane.ERROR_MESSAGE);
           tx_agent.grabFocus();
        }
    }
//>>>>>>>>> addJTable <<<<<<<<<<<         

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>>  
     * *** >>> Why ------------->>>
     * *** >>> Parameters ------>>>
     * *** >>> Status ---------->>>
     */
//>>>>>>>>> cleareFields <<<<<<<<<<<      
    private void cleareFields() {
        tx_name.setText(null);
        tx_doctor_id.setText(null);
        tx_contact_number.setText(null);
        tx_nic.setText(null);
        jComboBox_distric.setSelectedIndex(0);
        tx_address.setText(null);
        jComboBox_bank.setSelectedIndex(0);
        tx_branch.setText(null);
        tx_account_number.setText(null);
        jComboBox_isactive.setSelectedIndex(0);
        tx_agent.grabFocus();
        tx_agent.setText(null);
        idsearch = 0;
        searchALLDoctor();
        tx_agent.grabFocus();
    }
//>>>>>>>>> cleareFields <<<<<<<<<<<         

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>>  
     * *** >>> Why ------------->>> 
     * *** >>> Parameters ------>>>
     * *** >>> Status ---------->>>
     */
//>>>>>>>>> searchAgent <<<<<<<<<<<      
    private void searchAgent() {
        try {
            ResultSet rs = DBClass.getData("select * from doctor where iddoctor='" + Integer.parseInt(tx_doctor_id.getText()) + "' order by iddoctor");
            if (DBClass.r.isBeforeFirst() == true) {
                while (rs.next()) {
                    idsearch = (rs.getInt("iddoctor"));
                    tx_agent.setText("" + searchDockterrep(rs.getInt("iddoctorrep")));
                    tx_doctor_id.setText(""+idsearch);
                    tx_name.setText(rs.getString("doctorname"));
                     tx_nic.setText(rs.getString("doctorid"));
                    tx_contact_number.setText(rs.getString("doctortell"));
                    jComboBox_distric.setSelectedItem(rs.getString("doctorprovince"));
                    tx_address.setText(rs.getString("doctoraddress"));
                    jComboBox_bank.setSelectedItem(rs.getString("doctorbankname"));
                    tx_branch.setText(rs.getString("doctorbankbranchname"));
                    tx_account_number.setText(rs.getString("doctorbankacountnumber"));
                    if (rs.getInt("status") == 1) {
                        jComboBox_isactive.setSelectedIndex(0);
                    } else if (rs.getInt("ststus") == 2) {
                        jComboBox_isactive.setSelectedIndex(2);
                    } else {
                        jComboBox_isactive.setSelectedIndex(1);
                    }
                    doctor_la_enter.setVisible(false);
                    doctor_la_new.setVisible(true);
                }
            }
        } catch (Exception ex) {
            systemLogger.initLogger(doctor.class).error("searchAgent()  Error",ex);
JOptionPane.showMessageDialog(null, "Error searchAgentTable!!! \n searchAgent() \n" + ex, "Error Massage", JOptionPane.ERROR_MESSAGE);
tx_agent.grabFocus();
        }
    }
    //>>>>>>>>> searchAgent <<<<<<<<<<<         

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>>  
     * *** >>> Why ------------->>> 
     * *** >>> Parameters ------>>>
     * *** >>> Status ---------->>>
     */
//>>>>>>>>> updaterep <<<<<<<<<<<     
    private void updaterep() {
        try {
            int bb = jComboBox_isactive.getSelectedIndex();
            if (bb == 0) {
                bb = 1;
            } else if (bb == 1) {
                bb = 0;
            } else {
                bb = 2;
            }
            DBClass.putData("update doctor set doctorname='" + tx_name.getText() + "',doctorid='" + tx_nic.getText() + "',doctortell='" + tx_contact_number.getText()
                    + "',doctorprovince='" + jComboBox_distric.getSelectedItem().toString() + "',doctoraddress ='" + tx_address.getText() + "',doctorbankname ='" + jComboBox_bank.getSelectedItem().toString()
                    + "',doctorbankbranchname ='" + tx_branch.getText() + "',doctorbankacountnumber ='" + tx_account_number.getText()
                    + "',status ='" + bb + "' where  iddoctor  ='" + idsearch + "' ");
            JOptionPane.showMessageDialog(this, "Update Successful", "Updated", JOptionPane.OK_OPTION);
            cleareFields();
            
        } catch (Exception e) {
            systemLogger.initLogger(doctor.class).error("updaterep()  Error",e);
            JOptionPane.showMessageDialog(null, "Error DoctoraTableUpdate !!! \n updaterep() \n", "Error Massage", JOptionPane.ERROR_MESSAGE);
            tx_agent.grabFocus();

        }
    }
    //>>>>>>>>> updaterep <<<<<<<<<<<         

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\   
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>>  
     * *** >>> Why ------------->>> 
     * *** >>> Parameters ------>>>
     * *** >>> Status ---------->>>
     */
//>>>>>>>>> deleterep <<<<<<<<<<<     
    private void deleterep() {
        try {
            int bb = 2;

            int x = JOptionPane.showConfirmDialog(this, "Do you sure Delete Doctor ?", "Delete Verify", JOptionPane.YES_NO_OPTION);
            if (JOptionPane.YES_OPTION == x) {
                DBClass.putData("update doctor  set status ='" + bb + "' where  iddoctor  ='" + idsearch + "' ");
                cleareFields();
                
            } else if (JOptionPane.NO_OPTION == x) {
                setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            }
        } catch (Exception e) {
              systemLogger.initLogger(doctor.class).error("deleterep()  Error",e);
            JOptionPane.showMessageDialog(null, "Error DoctoraTableDelete !!! \n deleterep() \n", "Error Massage", JOptionPane.ERROR_MESSAGE);
            tx_agent.grabFocus();

        }
    }
    //>>>>>>>>> deleterep <<<<<<<<<<<         

//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>>  
     * *** >>> Why ------------->>> 
     * *** >>> Parameters ------>>>String doctor, String id, String text, JList jList_jLayeredPane_Doctors
     * *** >>> Status ---------->>>
     */
//>>>>>>>>> searchANDListDockterrep <<<<<<<<<<<     
    private void searchANDListDockterrep() {
        try {
            
            DBClass.getData("select iddoctorrep ,repname from doctorrep  where  repname  like '"+tx_agent.getText()+"%' order by iddoctorrep");
         //  DBClass.getData("select iddoctorrep ,repname from doctorrep order by iddoctorrep");
           jList1.removeAll();
           Vector v = new Vector();
             while (DBClass.r.next()) {
                 v.add(DBClass.r.getString("iddoctorrep") + "/" + DBClass.r.getString("repname"));
                    jList1.setListData(v);
                }
            
        } catch (Exception e) {
            systemLogger.initLogger(doctor.class).error("searchANDListDockterrep() Exception Error",e);
            JOptionPane.showMessageDialog(null, "Error searchANDListRIDN!!! \n ", "Error Massage List", JOptionPane.ERROR_MESSAGE);
            tx_agent.grabFocus();
        }
    }

    //>>>>>>>>> searchANDListDockterrep <<<<<<<<<<<         
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>>  
     * *** >>> Why ------------->>> 
     * *** >>> Parameters ------>>>
     * *** >>> Status ---------->>>
     */
//>>>>>>>>> searchDockterrep <<<<<<<<<<<     
    private String searchDockterrep(int text) {
        String repNI = null;
        try {
            DBClass.getData("select iddoctorrep,repname from doctorrep where iddoctorrep like '%" + text + "%' order by iddoctorrep");
            if (DBClass.r.isBeforeFirst() == true) {
                if (DBClass.r.next()) {
                    repNI = (DBClass.r.getString("iddoctorrep") + "/" + DBClass.r.getString("repname"));
                }
            }
        } catch (Exception e) {
            systemLogger.initLogger(doctor.class).error("searchDockterrep() Exception Error",e);
            JOptionPane.showMessageDialog(null, "Error searchANDList!!! \n " + e, "Error Massage List", JOptionPane.ERROR_MESSAGE);
            tx_agent.grabFocus();
        }
        if (repNI == null) {
            repNI = "NO One";
            return repNI;
        } else {
            return repNI;
        }
    }

    //>>>>>>>>> searchDockterrep <<<<<<<<<<<         
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>>  
     * *** >>> Why ------------->>> 
     * *** >>> Parameters ------>>>String doctor, String id, String text, JList jList_jLayeredPane_Doctors
     * *** >>> Status ---------->>>
     */
//>>>>>>>>> searchANDListDockter <<<<<<<<<<< 

    private void searchANDListDockter() {
        try {
            DBClass.getData("select iddoctor from doctor where iddoctor  like '" + Integer.parseInt(tx_doctor_id.getText()) + "%' order by iddoctor");
            Vector v = new Vector();
            jList2.removeAll();
            if (DBClass.r.isBeforeFirst() == true) {
                while (DBClass.r.next()) {
                    v.add(DBClass.r.getString("iddoctor"));
                    jList2.setListData(v);
                }
            } 
        } catch (Exception e) {
             systemLogger.initLogger(doctor.class).error("searchDockterrep() Exception Error",e);
            JOptionPane.showMessageDialog(null, "Error searchANDListDID!!! \n ", "Error Massage List", JOptionPane.ERROR_MESSAGE);
            tx_agent.grabFocus();
        }
    }

    //>>>>>>>>> searchANDListDockter <<<<<<<<<<<         
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\ 
    /* *** >>> Date ------------>>> 
     * *** >>> What ------------>>>  
     * *** >>> Why ------------->>> 
     * *** >>> Parameters ------>>>
     * *** >>> Status ---------->>>
     */
//>>>>>>>>> emterMouseClickMethod <<<<<<<<<<< 

    private void emterMouseClickMethod() {
        if (tx_agent.getText().trim().isEmpty()) {
            tx_agent.grabFocus();
        } else if (tx_doctor_id.getText().trim().isEmpty()) {
            tx_doctor_id.grabFocus();
        } else if (tx_name.getText().trim().isEmpty()) {
            tx_name.grabFocus();
        } else if (tx_contact_number.getText().trim().isEmpty()) {
            tx_contact_number.grabFocus();
        } else if (tx_nic.getText().trim().isEmpty()) {
            tx_nic.grabFocus();
        } else if (tx_address.getText().trim().isEmpty()) {
            tx_address.grabFocus();
        } else if (tx_branch.getText().trim().isEmpty()) {
            tx_branch.grabFocus();
        } else if (tx_account_number.getText().trim().isEmpty()) {
            tx_account_number.grabFocus();
        } else if (!(tx_doctor_id.getText().trim().isEmpty() & tx_agent.getText().trim().isEmpty() & tx_name.getText().trim().isEmpty() & tx_contact_number.getText().trim().isEmpty() & tx_nic.getText().trim().isEmpty()
                & tx_address.getText().trim().isEmpty() & tx_branch.getText().trim().isEmpty() & tx_account_number.getText().trim().isEmpty())) {
            addJTable();
        }
    }
    //>>>>>>>>> emterMouseClickMethod <<<<<<<<<<<         
//---------########---------*********************---------########---------*********************---------########---------\\ 
//---------########---------*********************---------########---------*********************---------########---------\\    
//---------########---------*********************---------########---------*********************---------########---------\\     

}

////  DefaultTableModel defTabModPen = (DefaultTableModel) jTable_doctor.getModel();
////                   Vector v = new Vector();
////                    v.add(tx_agent.getText());
////                    v.add(tx_doctor_id.getText());
////                    v.add(tx_name.getText());
////                    v.add(tx_contact_number.getText());
////                    v.add(tx_nic.getText());
////                    v.add(jComboBox_distric.getSelectedItem());
////                    v.add(tx_address.getText());
////                    v.add(jComboBox_bank.getSelectedItem());
////                    v.add(tx_account_number.getText());
////                    v.add(jComboBox_isactive.getSelectedItem());
////                    defTabModPen.addRow(v);
